package com.isands.farmer.registry.model.impl;

import com.isands.farmer.registry.model.Region;
import com.isands.farmer.registry.model.RegionModel;
import com.isands.farmer.registry.model.RegionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Region service. Represents a row in the &quot;FarmerRegistry_Region&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.isands.farmer.registry.model.RegionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RegionImpl
 * @see com.isands.farmer.registry.model.Region
 * @see com.isands.farmer.registry.model.RegionModel
 * @generated
 */
@JSON(strict = true)
public class RegionModelImpl extends BaseModelImpl<Region>
    implements RegionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a region model instance should use the {@link com.isands.farmer.registry.model.Region} interface instead.
     */
    public static final String TABLE_NAME = "FarmerRegistry_Region";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "code_", Types.VARCHAR },
            { "archive", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table FarmerRegistry_Region (id_ LONG not null primary key,name VARCHAR(75) null,code_ VARCHAR(75) null,archive BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table FarmerRegistry_Region";
    public static final String ORDER_BY_JPQL = " ORDER BY region.name ASC, region.code ASC";
    public static final String ORDER_BY_SQL = " ORDER BY FarmerRegistry_Region.name ASC, FarmerRegistry_Region.code_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.isands.farmer.registry.model.Region"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.isands.farmer.registry.model.Region"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.isands.farmer.registry.model.Region"),
            true);
    public static long ARCHIVE_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static long NAME_COLUMN_BITMASK = 4L;
    public static long CODE_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.isands.farmer.registry.model.Region"));
    private static ClassLoader _classLoader = Region.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Region.class };
    private long _id;
    private long _originalId;
    private boolean _setOriginalId;
    private String _name;
    private String _originalName;
    private String _code;
    private boolean _archive;
    private boolean _originalArchive;
    private boolean _setOriginalArchive;
    private long _columnBitmask;
    private Region _escapedModel;

    public RegionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Region toModel(RegionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Region model = new RegionImpl();

        model.setId(soapModel.getId());
        model.setName(soapModel.getName());
        model.setCode(soapModel.getCode());
        model.setArchive(soapModel.getArchive());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Region> toModels(RegionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Region> models = new ArrayList<Region>(soapModels.length);

        for (RegionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Region.class;
    }

    @Override
    public String getModelClassName() {
        return Region.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("name", getName());
        attributes.put("code", getCode());
        attributes.put("archive", getArchive());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String code = (String) attributes.get("code");

        if (code != null) {
            setCode(code);
        }

        Boolean archive = (Boolean) attributes.get("archive");

        if (archive != null) {
            setArchive(archive);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _columnBitmask |= ID_COLUMN_BITMASK;

        if (!_setOriginalId) {
            _setOriginalId = true;

            _originalId = _id;
        }

        _id = id;
    }

    public long getOriginalId() {
        return _originalId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask = -1L;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @JSON
    @Override
    public String getCode() {
        if (_code == null) {
            return StringPool.BLANK;
        } else {
            return _code;
        }
    }

    @Override
    public void setCode(String code) {
        _columnBitmask = -1L;

        _code = code;
    }

    @JSON
    @Override
    public boolean getArchive() {
        return _archive;
    }

    @Override
    public boolean isArchive() {
        return _archive;
    }

    @Override
    public void setArchive(boolean archive) {
        _columnBitmask |= ARCHIVE_COLUMN_BITMASK;

        if (!_setOriginalArchive) {
            _setOriginalArchive = true;

            _originalArchive = _archive;
        }

        _archive = archive;
    }

    public boolean getOriginalArchive() {
        return _originalArchive;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Region.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Region toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Region) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RegionImpl regionImpl = new RegionImpl();

        regionImpl.setId(getId());
        regionImpl.setName(getName());
        regionImpl.setCode(getCode());
        regionImpl.setArchive(getArchive());

        regionImpl.resetOriginalValues();

        return regionImpl;
    }

    @Override
    public int compareTo(Region region) {
        int value = 0;

        value = getName().compareToIgnoreCase(region.getName());

        if (value != 0) {
            return value;
        }

        value = getCode().compareToIgnoreCase(region.getCode());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Region)) {
            return false;
        }

        Region region = (Region) obj;

        long primaryKey = region.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RegionModelImpl regionModelImpl = this;

        regionModelImpl._originalId = regionModelImpl._id;

        regionModelImpl._setOriginalId = false;

        regionModelImpl._originalName = regionModelImpl._name;

        regionModelImpl._originalArchive = regionModelImpl._archive;

        regionModelImpl._setOriginalArchive = false;

        regionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Region> toCacheModel() {
        RegionCacheModel regionCacheModel = new RegionCacheModel();

        regionCacheModel.id = getId();

        regionCacheModel.name = getName();

        String name = regionCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            regionCacheModel.name = null;
        }

        regionCacheModel.code = getCode();

        String code = regionCacheModel.code;

        if ((code != null) && (code.length() == 0)) {
            regionCacheModel.code = null;
        }

        regionCacheModel.archive = getArchive();

        return regionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", code=");
        sb.append(getCode());
        sb.append(", archive=");
        sb.append(getArchive());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.isands.farmer.registry.model.Region");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>code</column-name><column-value><![CDATA[");
        sb.append(getCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archive</column-name><column-value><![CDATA[");
        sb.append(getArchive());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
